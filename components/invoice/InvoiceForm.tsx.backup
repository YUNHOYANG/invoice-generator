'use client'

import { useState, useEffect } from 'react'
import { generateInvoicePDF } from '@/lib/pdfGenerator'
import PasswordModal from '@/components/PasswordModal'
import InvoiceTemplateSelector from '@/components/InvoiceTemplateSelector'
import KoreanInvoiceForm from '@/components/invoice/KoreanInvoiceForm'

interface InvoiceItem {
  no: number
  description: string
  quantity: number
  unit: string
  unitPrice: number
  unitPriceCurrency: string
  amount: number
  amountCurrency: string
  note: string
}

interface InvoiceFormData {
  invoiceNo: string
  invoiceDate: string
  customerReferenceNo: string
  customerReferenceDate: string

  sellerName: string
  sellerAddress: string
  sellerContact: string

  soldToName: string
  soldToAddress: string
  soldToContact: string

  shipToName: string
  shipToAddress: string
  shipToContact: string

  termsOfSale: string
  termsOfPayment: string
  currencyOfSettlement: string
  modeOfShipment: string
  billOfLading: string

  packageMarks: string
  totalCommercialValue: string
  miscCharges: string
  totalInvoiceValue: string

  certificationText: string
  signedBy: string
  title: string

  logoUrl: string
  remarks: string

  items: InvoiceItem[]
}

interface InvoiceFormProps {
  initialData?: any
  isEditMode?: boolean
  isProforma?: boolean
}

export default function InvoiceForm({ initialData, isEditMode = false, isProforma = false }: InvoiceFormProps = {}) {
  // Get today's date in YYYY-MM-DD format
  const getTodayDate = () => {
    const today = new Date()
    return today.toISOString().split('T')[0]
  }

  const [formData, setFormData] = useState<InvoiceFormData>(initialData || {
    invoiceNo: '',
    invoiceDate: getTodayDate(),
    customerReferenceNo: '',
    customerReferenceDate: getTodayDate(),
    sellerName: '',
    sellerAddress: '',
    sellerContact: '',
    soldToName: '',
    soldToAddress: '',
    soldToContact: '',
    shipToName: '',
    shipToAddress: '',
    shipToContact: '',
    termsOfSale: '',
    termsOfPayment: '',
    currencyOfSettlement: 'USD',
    modeOfShipment: '',
    billOfLading: '',
    packageMarks: '',
    totalCommercialValue: '',
    miscCharges: '',
    totalInvoiceValue: '',
    certificationText: 'I CERTIFY THAT THE STATED EXPORT PROCESS AND DESCRIPTION OF GOODS ARE TRUE AND CORRECT',
    signedBy: '',
    title: '',
    logoUrl: '',
    remarks: '',
    items: [
      { no: 1, description: '', quantity: 0, unit: '', unitPrice: 0, unitPriceCurrency: 'USD', amount: 0, amountCurrency: 'USD', note: '' }
    ]
  })

  const [logoPreview, setLogoPreview] = useState<string>(initialData?.logoUrl || '')
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const [selectedTemplate, setSelectedTemplate] = useState<'korean' | 'standard'>('korean')

  // Set logo preview if editing
  useEffect(() => {
    if (initialData?.logoUrl) {
      setLogoPreview(initialData.logoUrl)
    }
  }, [initialData])

  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        const base64String = reader.result as string
        setLogoPreview(base64String)
        setFormData({ ...formData, logoUrl: base64String })
      }
      reader.readAsDataURL(file)
    }
  }

  const addItem = () => {
    setFormData({
      ...formData,
      items: [...formData.items, {
        no: formData.items.length + 1,
        description: '',
        quantity: 0,
        unit: '',
        unitPrice: 0,
        unitPriceCurrency: 'USD',
        amount: 0,
        amountCurrency: 'USD',
        note: ''
      }]
    })
  }

  const updateItem = (index: number, field: keyof InvoiceItem, value: any) => {
    const newItems = [...formData.items]
    newItems[index] = { ...newItems[index], [field]: value }

    if (field === 'quantity' || field === 'unitPrice') {
      newItems[index].amount = newItems[index].quantity * newItems[index].unitPrice
    }

    // Calculate Total Commercial Value (sum of all amounts)
    const totalCommercialValue = newItems.reduce((sum, item) => sum + (item.amount || 0), 0)

    // Calculate Total Invoice Value (Commercial Value + Misc Charges)
    const miscCharges = parseFloat(formData.miscCharges) || 0
    const totalInvoiceValue = totalCommercialValue + miscCharges

    setFormData({
      ...formData,
      items: newItems,
      totalCommercialValue: totalCommercialValue.toFixed(2),
      totalInvoiceValue: totalInvoiceValue.toFixed(2)
    })
  }

  const removeItem = (index: number) => {
    const newItems = formData.items.filter((_, i) => i !== index)
    setFormData({ ...formData, items: newItems })
  }

  const validateForm = () => {
    const errors: string[] = []

    // Basic Invoice Information
    if (!formData.invoiceNo?.trim()) errors.push('Invoice Number')
    if (!formData.invoiceDate) errors.push('Invoice Date')

    // Seller Information
    if (!formData.sellerName?.trim()) errors.push('Seller Name/Address')

    // Buyer Information
    if (!formData.soldToName?.trim()) errors.push('Sold To Name/Address')

    // Shipping Information
    if (!formData.shipToName?.trim()) errors.push('Ship To Name/Address')

    // Payment Terms
    if (!formData.termsOfSale?.trim()) errors.push('Terms of Sale')
    if (!formData.termsOfPayment?.trim()) errors.push('Terms of Payment')
    if (!formData.currencyOfSettlement?.trim()) errors.push('Currency of Settlement')

    // Shipping Details
    if (!formData.modeOfShipment?.trim()) errors.push('Mode of Shipment')

    // Items validation
    if (!formData.items || formData.items.length === 0) {
      errors.push('At least one item')
    } else {
      const invalidItems = formData.items.filter(item =>
        !item.description?.trim() || !item.quantity || !item.unitPrice || !item.unit?.trim()
      )
      if (invalidItems.length > 0) {
        errors.push('Complete item information (Description, Quantity, Unit of Measure, Unit Price)')
      }
    }

    // Totals
    if (!formData.totalCommercialValue?.trim()) errors.push('Total Commercial Value')
    if (!formData.totalInvoiceValue?.trim()) errors.push('Total Invoice Value')

    if (errors.length > 0) {
      alert('Please fill in the following required fields:\n\n• ' + errors.join('\n• '))
      return false
    }

    return true
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (validateForm()) {
      setShowPasswordModal(true)
    }
  }

  const handlePDFGeneration = () => {
    if (validateForm()) {
      generateInvoicePDF(formData, isProforma, selectedTemplate)
    }
  }

  const handlePasswordConfirm = async (password: string) => {
    setShowPasswordModal(false)

    try {
      const url = isEditMode && initialData?.id
        ? `/api/invoices/${initialData.id}`
        : '/api/invoices'

      const method = isEditMode ? 'PUT' : 'POST'

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ...formData, password, template: selectedTemplate })
      })

      if (response.ok) {
        alert(isEditMode ? 'Invoice updated successfully!' : 'Invoice saved successfully!')
      } else {
        const error = await response.json()
        alert(error.error || `Failed to ${isEditMode ? 'update' : 'save'} invoice`)
      }
    } catch (error) {
      console.error('Error:', error)
      alert(`Error ${isEditMode ? 'updating' : 'saving'} invoice`)
    }
  }

  return (
    <div className="max-w-7xl mx-auto">
      {/* Template Selector */}
      <InvoiceTemplateSelector
        selectedTemplate={selectedTemplate}
        onTemplateChange={setSelectedTemplate}
      />

      {/* Conditionally render form based on selected template */}
      {selectedTemplate === 'korean' ? (
        <KoreanInvoiceForm
          formData={formData}
          setFormData={setFormData}
          onSubmit={handleSubmit}
          onPDFGeneration={handlePDFGeneration}
          isProforma={isProforma}
        />
      ) : (
        <form onSubmit={handleSubmit} className="bg-white border-2 border-black">
          {/* Logo and Title Section */}
          <div className="border-b-2 border-black p-4">
            <div className="flex justify-between items-center">
              <div className="flex-1">
                {logoPreview ? (
                  <div className="flex items-center gap-4">
                    <img src={logoPreview} alt="Company Logo" className="h-16 object-contain" />
                    <button
                      type="button"
                      onClick={() => {
                        setLogoPreview('')
                        setFormData({ ...formData, logoUrl: '' })
                      }}
                      className="text-red-600 hover:text-red-800 text-sm"
                    >
                      Remove Logo
                    </button>
                  </div>
                ) : (
                  <div>
                    <label className="cursor-pointer inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      Upload Company Logo
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleLogoUpload}
                        className="hidden"
                      />
                    </label>
                    <p className="text-sm text-gray-500 mt-1">Optional - Upload your company logo</p>
                  </div>
                )}
              </div>
              <h1 className="text-2xl font-bold text-center flex-1">
                {isProforma ? 'PROFORMA INVOICE' : 'COMMERCIAL INVOICE'}
              </h1>
              <div className="flex-1"></div>
            </div>
          </div>

          {/* Top Section - Two Column Layout */}
          <div className="grid grid-cols-2 border-b-2 border-black">
            {/* Left: SELLER */}
            <div className="border-r-2 border-black p-3">
              <div className="font-bold italic mb-2">
                SELLER <span className="text-red-600">*</span>
              </div>
              <textarea
                value={formData.sellerName}
                onChange={(e) => setFormData({ ...formData, sellerName: e.target.value })}
                className="w-full border-0 focus:outline-none resize-none"
                rows={4}
                placeholder="Seller name and address (Required)"
              />
            </div>

            {/* Right: Invoice Info */}
            <div className="p-3">
              <div className="grid grid-cols-2 gap-2 mb-2">
                <div className="font-bold italic">
                  INVOICE NUMBER <span className="text-red-600">*</span>
                </div>
                <div className="font-bold italic">
                  DATE <span className="text-red-600">*</span>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-2 mb-4">
                <input
                  type="text"
                  value={formData.invoiceNo}
                  onChange={(e) => setFormData({ ...formData, invoiceNo: e.target.value })}
                  className="border-0 border-b border-black focus:outline-none"
                  placeholder="Required"
                />
                <input
                  type="date"
                  value={formData.invoiceDate}
                  onChange={(e) => setFormData({ ...formData, invoiceDate: e.target.value })}
                  className="border-0 border-b border-black focus:outline-none"
                />
              </div>

              <div className="grid grid-cols-2 gap-2 mb-2">
                <div className="font-bold italic">CUSTOMER REFERENCE NUMBER</div>
                <div className="font-bold italic">DATE</div>
              </div>
              <div className="grid grid-cols-2 gap-2">
                <input
                  type="text"
                  value={formData.customerReferenceNo}
                  onChange={(e) => setFormData({ ...formData, customerReferenceNo: e.target.value })}
                  className="border-0 border-b border-black focus:outline-none"
                />
                <input
                  type="date"
                  value={formData.customerReferenceDate}
                  onChange={(e) => setFormData({ ...formData, customerReferenceDate: e.target.value })}
                  className="border-0 border-b border-black focus:outline-none"
                />
              </div>
            </div>
          </div>

          {/* SOLD TO / TERMS Section */}
          <div className="grid grid-cols-2 border-b-2 border-black">
        {/* Left: SOLD TO */}
        <div className="border-r-2 border-black p-3">
          <div className="font-bold italic mb-2">
            SOLD TO <span className="text-red-600">*</span>
          </div>
          <textarea
            value={formData.soldToName}
            onChange={(e) => setFormData({ ...formData, soldToName: e.target.value })}
            className="w-full border-0 focus:outline-none resize-none"
            rows={4}
            placeholder="Customer name and address (Required)"
          />
        </div>

        {/* Right: Terms */}
        <div className="p-3">
          <div className="mb-3">
            <div className="font-bold italic mb-1">
              TERMS OF SALE <span className="text-red-600">*</span>
            </div>
            <input
              type="text"
              value={formData.termsOfSale}
              onChange={(e) => setFormData({ ...formData, termsOfSale: e.target.value })}
              className="w-full border-0 border-b border-black focus:outline-none"
              placeholder="e.g., FOB, CIF, EXW (Required)"
            />
          </div>

          <div>
            <div className="font-bold italic mb-1">
              TERMS OF PAYMENT <span className="text-red-600">*</span>
            </div>
            <input
              type="text"
              value={formData.termsOfPayment}
              onChange={(e) => setFormData({ ...formData, termsOfPayment: e.target.value })}
              className="w-full border-0 border-b border-black focus:outline-none"
              placeholder="e.g., T/T, L/C (Required)"
            />
          </div>
        </div>
      </div>

      {/* SHIP TO / CURRENCY Section */}
      <div className="grid grid-cols-2 border-b-2 border-black">
        {/* Left: SHIP TO */}
        <div className="border-r-2 border-black p-3">
          <div className="font-bold italic mb-2">
            SHIP TO <span className="text-red-600">*</span>
          </div>
          <textarea
            value={formData.shipToName}
            onChange={(e) => setFormData({ ...formData, shipToName: e.target.value })}
            className="w-full border-0 focus:outline-none resize-none"
            rows={4}
            placeholder="Shipping address (Required)"
          />
        </div>

        {/* Right: Shipping Info */}
        <div className="p-3">
          <div className="mb-3">
            <div className="font-bold italic mb-1">
              CURRENCY OF SETTLEMENT <span className="text-red-600">*</span>
            </div>
            <select
              value={formData.currencyOfSettlement}
              onChange={(e) => setFormData({ ...formData, currencyOfSettlement: e.target.value })}
              className="w-full border-0 border-b border-black focus:outline-none"
            >
              <option value="USD">USD</option>
              <option value="EUR">EUR</option>
              <option value="GBP">GBP</option>
              <option value="JPY">JPY</option>
            </select>
          </div>

          <div className="grid grid-cols-2 gap-2">
            <div>
              <div className="font-bold italic mb-1">
                MODE OF SHIPMENT <span className="text-red-600">*</span>
              </div>
              <input
                type="text"
                value={formData.modeOfShipment}
                onChange={(e) => setFormData({ ...formData, modeOfShipment: e.target.value })}
                className="w-full border-0 border-b border-black focus:outline-none"
                placeholder="Air/Ocean/Surface"
              />
            </div>
            <div>
              <div className="font-bold italic mb-1">BILL OF LADING/AWB</div>
              <input
                type="text"
                value={formData.billOfLading}
                onChange={(e) => setFormData({ ...formData, billOfLading: e.target.value })}
                className="w-full border-0 border-b border-black focus:outline-none"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Items Table */}
      <div className="border-b-2 border-black">
        <div className="flex justify-end p-2">
          <button type="button" onClick={addItem} className="bg-blue-500 text-white px-3 py-1 rounded text-sm">
            + Add Row
          </button>
        </div>
        <table className="w-full border-collapse">
          <thead>
            <tr className="border-t-2 border-black">
              <th className="border-r border-black p-2 font-bold italic text-sm">QTY</th>
              <th className="border-r border-black p-2 font-bold italic text-sm">PRODUCT DESCRIPTION AND HARMONIZED CODE</th>
              <th className="border-r border-black p-2 font-bold italic text-sm">UNIT OF MEASURE</th>
              <th className="border-r border-black p-2 font-bold italic text-sm">UNIT PRICE</th>
              <th className="border-r border-black p-2 font-bold italic text-sm">TOTAL PRICE</th>
              <th className="p-2"></th>
            </tr>
          </thead>
          <tbody>
            {formData.items.map((item, index) => (
              <tr key={index} className="border-t border-black">
                <td className="border-r border-black p-2">
                  <input
                    type="number"
                    value={item.quantity}
                    onChange={(e) => updateItem(index, 'quantity', parseFloat(e.target.value) || 0)}
                    className="w-full border-0 focus:outline-none text-center"
                  />
                </td>
                <td className="border-r border-black p-2">
                  <textarea
                    value={item.description}
                    onChange={(e) => updateItem(index, 'description', e.target.value)}
                    className="w-full border-0 focus:outline-none resize-none"
                    rows={2}
                  />
                </td>
                <td className="border-r border-black p-2">
                  <input
                    type="text"
                    value={item.unit}
                    onChange={(e) => updateItem(index, 'unit', e.target.value)}
                    className="w-full border-0 focus:outline-none text-center"
                  />
                </td>
                <td className="border-r border-black p-2">
                  <input
                    type="number"
                    step="0.01"
                    value={item.unitPrice}
                    onChange={(e) => updateItem(index, 'unitPrice', parseFloat(e.target.value) || 0)}
                    className="w-full border-0 focus:outline-none text-right"
                  />
                </td>
                <td className="border-r border-black p-2">
                  <input
                    type="number"
                    value={item.amount.toFixed(2)}
                    readOnly
                    className="w-full border-0 focus:outline-none text-right bg-gray-50"
                  />
                </td>
                <td className="p-2">
                  <button
                    type="button"
                    onClick={() => removeItem(index)}
                    className="text-red-500 hover:text-red-700 text-sm"
                  >
                    ✕
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Package Marks / Totals Section */}
      <div className="grid grid-cols-2 border-b-2 border-black">
        {/* Left: Package Marks */}
        <div className="border-r-2 border-black p-3">
          <div className="font-bold italic mb-2">PACKAGE MARKS</div>
          <textarea
            value={formData.packageMarks}
            onChange={(e) => setFormData({ ...formData, packageMarks: e.target.value })}
            className="w-full border-0 focus:outline-none resize-none"
            rows={5}
            placeholder="Package marks and numbers"
          />
        </div>

        {/* Right: Totals */}
        <div className="p-3">
          <div className="space-y-3">
            <div>
              <div className="font-bold italic mb-1">
                TOTAL COMMERCIAL VALUE <span className="text-red-600">*</span>
              </div>
              <input
                type="text"
                value={formData.totalCommercialValue}
                readOnly
                className="w-full border-0 border-b border-black focus:outline-none bg-gray-50"
                placeholder="Auto-calculated from items"
              />
            </div>
            <div>
              <div className="font-bold italic mb-1">MISC CHARGES (PACKING, INSURANCE, ETC.)</div>
              <input
                type="text"
                value={formData.miscCharges}
                onChange={(e) => {
                  const miscCharges = e.target.value
                  const totalCommercialValue = parseFloat(formData.totalCommercialValue) || 0
                  const miscChargesNum = parseFloat(miscCharges) || 0
                  const totalInvoiceValue = totalCommercialValue + miscChargesNum

                  setFormData({
                    ...formData,
                    miscCharges,
                    totalInvoiceValue: totalInvoiceValue.toFixed(2)
                  })
                }}
                className="w-full border-0 border-b border-black focus:outline-none"
                placeholder="Optional"
              />
            </div>
            <div>
              <div className="font-bold italic mb-1">
                TOTAL INVOICE VALUE <span className="text-red-600">*</span>
              </div>
              <input
                type="text"
                value={formData.totalInvoiceValue}
                readOnly
                className="w-full border-0 border-b-2 border-black focus:outline-none font-bold bg-gray-50"
                placeholder="Auto-calculated"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Certifications */}
      <div className="grid grid-cols-[400px_1fr] border-b-2 border-black min-h-[250px]">
        {/* Left: CERTIFICATIONS Label and Notes */}
        <div className="border-r-2 border-black p-3">
          <div className="font-bold italic mb-3">CERTIFICATIONS</div>
          <textarea
            value={formData.remarks}
            onChange={(e) => setFormData({ ...formData, remarks: e.target.value })}
            className="w-full border-0 focus:outline-none resize-none"
            rows={8}
            placeholder="Additional notes or certifications..."
          />
        </div>

        {/* Right: Certification Content */}
        <div className="p-3 flex flex-col justify-between">
          <div className="mb-4">
            <textarea
              value={formData.certificationText}
              onChange={(e) => setFormData({ ...formData, certificationText: e.target.value })}
              className="w-full border-0 focus:outline-none resize-none"
              rows={2}
            />
          </div>

          <div className="space-y-6 mt-auto">
            <div>
              <div className="font-bold italic mb-2">SIGNED</div>
              <input
                type="text"
                value={formData.signedBy}
                onChange={(e) => setFormData({ ...formData, signedBy: e.target.value })}
                className="w-full border-0 border-b-2 border-black focus:outline-none pb-1"
              />
            </div>
            <div>
              <div className="font-bold italic mb-2">TITLE</div>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="w-full border-0 border-b-2 border-black focus:outline-none pb-1"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="p-4 bg-gray-50 flex gap-4">
        <button type="submit" className="flex-1 bg-green-500 text-white py-3 rounded font-bold hover:bg-green-600 transition">
          {isEditMode ? 'Update Invoice' : 'Save Invoice'}
        </button>
        <button
          type="button"
          onClick={handlePDFGeneration}
          className="flex-1 bg-blue-500 text-white py-3 rounded font-bold hover:bg-blue-600 transition"
        >
          Download PDF
        </button>
      </div>

          {/* Password Modal */}
          <PasswordModal
            isOpen={showPasswordModal}
            onClose={() => setShowPasswordModal(false)}
            onConfirm={handlePasswordConfirm}
          />
        </form>
      )}

      {/* Password Modal for Korean template (rendered outside the conditional) */}
      {selectedTemplate === 'korean' && (
        <PasswordModal
          isOpen={showPasswordModal}
          onClose={() => setShowPasswordModal(false)}
          onConfirm={handlePasswordConfirm}
        />
      )}
    </div>
  )
}
